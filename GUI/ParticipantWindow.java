//Generated by GuiGenie - Copyright (c) 2004 Mario Awad.
//Home Page http://guigenie.cjb.net - Check often for new versions!

import java.awt.*;
import java.awt.event.*;
import java.util.TimerTask;
import java.util.Timer;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;

public class ParticipantWindow extends JPanel {
    static final int IMG_WIDTH = 8;
    static final int IMG_HEIGHT = 8;

    private JLabel jcomp1;
    private JLabel lblGameStatus;
    private JLabel jcomp3;
    private JLabel lblWord;
    private JLabel jcomp5;
    private JLabel lblRemainingTime;
    private JToggleButton[][] imageInput = new JToggleButton[IMG_WIDTH][IMG_HEIGHT];
    private JButton btnSubmit;
    private JLabel lblResult;
    private JButton btnContinueAsJudge;

    private UIActionHandler actionHandler;

    private Timer countdownTimer = new Timer();
    private int secondsLeft = 0;

    public ParticipantWindow(UIActionHandler handler) {
        this.actionHandler = handler;
        UIManager.put("Label.font", new FontUIResource(new Font("Dialog", Font.PLAIN, 20)));

        // construct components
        jcomp1 = new JLabel("Status:");
        lblGameStatus = new JLabel("Init");
        jcomp3 = new JLabel("Word:");
        lblWord = new JLabel("XXXXXXXXXXXXXX");
        jcomp5 = new JLabel("Time:");
        lblRemainingTime = new JLabel("XX s");
        btnSubmit = new JButton("Submit");
        lblResult = new JLabel("YOU WIN!", SwingConstants.CENTER);
        btnContinueAsJudge = new JButton("Continue as Judge");

        // adjust size and set layout
        setPreferredSize(new Dimension(800, 510));
        setLayout(null);

        // add components
        add(jcomp1);
        add(lblGameStatus);
        add(jcomp3);
        add(lblWord);
        add(jcomp5);
        add(lblRemainingTime);
        add(btnSubmit);
        add(lblResult);
        add(btnContinueAsJudge);

        // set component bounds (only needed by Absolute Positioning)
        jcomp1.setBounds(520, 25, 100, 30);
        lblGameStatus.setBounds(600, 25, 200, 30);
        jcomp3.setBounds(520, 75, 100, 30);
        lblWord.setBounds(600, 75, 200, 30);
        jcomp5.setBounds(520, 125, 100, 30);
        lblRemainingTime.setBounds(600, 125, 200, 30);
        btnSubmit.setBounds(520, 175, 250, 35);
        lblResult.setBounds(520, 400, 250, 50);
        btnContinueAsJudge.setBounds(520, 450, 250, 40);

        lblResult.setFont(new FontUIResource(new Font("Dialog", Font.PLAIN, 35)));

        btnContinueAsJudge.setVisible(false);
        btnContinueAsJudge.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                System.out.println("Continue as Jude pressed!!!");
                actionHandler.continueAsJudge();
            }
        });

        btnSubmit.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                drawingFinished();
            }
        });

        // Create button matrix
        for (int u = 0; u < IMG_WIDTH; u++) {
            for (int v = 0; v < IMG_HEIGHT; v++) {
                imageInput[u][v] = new JToggleButton("", false);
                add(imageInput[u][v]);
                imageInput[u][v].setBounds(20 + 60 * u, 20 + 60 * v, 55, 55);
            }
        }

        // Reset all text views to default
        resetView();

    }

    public void resetView() {
        // Reset to default view

        lblGameStatus.setText("Waiting for word ...");
        lblWord.setText("");
        lblRemainingTime.setText("");
        btnSubmit.setEnabled(false);
        lblResult.setText("");

        for (int u = 0; u < IMG_WIDTH; u++) {
            for (int v = 0; v < IMG_HEIGHT; v++) {
                imageInput[u][v].setSelected(false);
                imageInput[u][v].setEnabled(false);
                imageInput[u][v].setBackground(Color.LIGHT_GRAY);
            }
        }
    }

    public void receivedWord(String word, int drawingTime) {
        // Change game status, display word, enable image drawing and count down

        lblGameStatus.setText("Start drawing!");
        lblWord.setText(word);
        btnSubmit.setEnabled(true);

        // Enable buttons
        for (int u = 0; u < IMG_WIDTH; u++) {
            for (int v = 0; v < IMG_HEIGHT; v++) {
                imageInput[u][v].setEnabled(true);
                imageInput[u][v].setBackground(Color.WHITE);
            }
        }

        // Start countdown timer
        secondsLeft = drawingTime + 1;
        TimerTask task = new TimerTask() {
            public void run() {
                secondsLeft--;
                lblRemainingTime.setText(secondsLeft + " s");

                if (secondsLeft <= 0) {
                    drawingFinished();
                }
            }
        };
        countdownTimer.scheduleAtFixedRate(task, 0, 1000);
    }

    public void drawingFinished() {
        // Drawing finished, either because timer expired or submit button was pressed
        System.out.println("Drawing finished.");

        lblGameStatus.setText("Waiting for decision ...");
        btnSubmit.setEnabled(false);

        try {
            countdownTimer.cancel();
            countdownTimer.purge();
        } catch (Exception e) {

        }
        lblRemainingTime.setText("");

        // Disable input buttons
        for (int u = 0; u < IMG_WIDTH; u++) {
            for (int v = 0; v < IMG_HEIGHT; v++) {
                imageInput[u][v].setEnabled(false);
                imageInput[u][v].setBackground(Color.LIGHT_GRAY);
            }
        }

        /*
         * boolean[][] imageMatrix = {{false, false, false, false, false, false, false,
         * false},
         * {false, false, false, false, false, false, false, false},
         * {false, false, false, false, false, false, false, false},
         * {false, false, false, false, false, false, false, false},
         * {false, false, false, false, false, false, false, false},
         * {false, false, false, false, false, false, false, false},
         * {false, false, false, false, false, false, false, false},
         * {false, false, false, false, false, false, false, false}};
         */
        String imageString = "";
        for (int u = 0; u < IMG_HEIGHT; u++) {
            for (int v = 0; v < IMG_WIDTH; v++) {
                if (imageInput[u][v].isSelected()) {
                    imageString += "1";
                } else {
                    imageString += "0";
                }
            }
        }
        actionHandler.sendImageHandler(imageString);
        System.out.println("IMAGE: ");
    }

    public void showResult(boolean winner, String... winnerName) {
        if (winner) {
            lblGameStatus.setText("YOU WIN!!");
            lblResult.setText("YOU WIN!!");
            lblResult.setForeground(Color.GREEN);
            btnContinueAsJudge.setVisible(true);
        } else {
            lblGameStatus.setText("YOU LOOSE :(");
            lblResult.setText("The winner is" + winnerName + "!");
            lblResult.setForeground(Color.RED);
        }
    }

}
/*
 * public static void main (String[] args) {
 * ParticipantWindow p = new ParticipantWindow();
 * JFrame frame = new JFrame ("Drawing Game: Participant");
 * frame.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
 * frame.getContentPane().add (p);
 * frame.pack();
 * frame.setVisible (true);
 * 
 * // Receive word from judge
 * TimerTask task = new TimerTask() {
 * public void run() {
 * p.receivedWord("House", 12);
 * }
 * };
 * Timer timer = new Timer("Timer");
 * timer.schedule(task, 5000);
 * 
 * // Show loose message
 * TimerTask task1 = new TimerTask() {
 * public void run() {
 * p.showResult(false);
 * }
 * };
 * Timer timer1 = new Timer("Timer");
 * timer1.schedule(task1, 22000);
 * 
 * // Reset view for another round
 * TimerTask task2 = new TimerTask() {
 * public void run() {
 * p.resetView();
 * }
 * };
 * Timer timer2 = new Timer("Timer");
 * timer2.schedule(task2, 30000);
 * 
 * }
 * }
 * 
 */